자동차보험 추천 시스템 - 작업 계획서

================================================================================
현재 상황 분석
================================================================================

1. 메인페이지 메뉴 정리 필요
현재 메인페이지에 4개의 메뉴가 있음:
- AI 상담사 (LangChain)
- ML 추천  
- RAG 시스템
- 보험 비교

→ 챗봇 기능만 남기고 나머지 메뉴 제거 필요

2. 데이터베이스 전환 필요
- 현재: SQLite3 (db.sqlite3) - 삭제 예정
- 목표: MySQL로 전환

3. RAG 시스템 작업 필요
- PDF → DOCX 변환
- Pinecone 인덱스 업로드
- Upstage 임베딩 사용

4. 불필요한 코드 정리 필요
- OpenAI 임베딩 관련 코드 제거
- EMBEDDING_DIMENSION=1536 제거
- 사용하지 않는 메뉴/기능 제거

================================================================================
팀 구성 및 역할 분담
================================================================================

프로젝트 팀원 (총 5명):
- 김진경: 프로젝트 매니저 / 백엔드 개발
- 장선호: 데이터 분석 / AI 모델링  
- 김민준: 프론트엔드 개발 / UI/UX
- 한창희: 데이터 수집 / 크롤링
- 유성미: 데이터베이스 설계 / API 개발

역할 분담:
- 백엔드: Django, LangChain, RAG 시스템
- 프론트엔드: Bootstrap, JavaScript, 음성 API
- 데이터: PDF 처리, Pinecone 관리, Mock 서버
- AI/ML: 추천 알고리즘, 임베딩 최적화
- DB/API: MySQL 설계, API 개발

================================================================================
개발 환경 및 배포 계획
================================================================================

개발 환경:
- Python 3.10
- Django 4.2+
- MySQL 8.0
- Pinecone (벡터 DB)
- PythonAnywhere (클라우드 호스팅)

배포 계획:
- [ ] PythonAnywhere 계정 설정
- [ ] MySQL 데이터베이스 생성
- [ ] Pinecone 인덱스 설정
- [ ] 환경변수 설정
- [ ] 정적 파일 수집
- [ ] 도메인 연결 (선택사항)

================================================================================
데이터베이스 스키마 상세
================================================================================

Users 테이블:
- user_id (PK): 사용자 고유 ID
- username: 로그인 아이디
- password_hash: 암호화된 비밀번호
- birth_date: 생년월일
- created_at: 가입일시
- updated_at: 정보 수정일시

UserProfiles 테이블 (ML 학습 데이터):
- profile_id (PK): 프로필 고유 ID
- user_id (FK): 사용자 ID 참조
- car_number: 자동차 번호
- driving_experience: 운전 경력 (년)
- gender: 성별
- age: 나이 (생년월일 기반 계산)
- occupation: 직업
- residence_area: 거주지역
- annual_mileage: 연간 주행거리
- accident_history: 사고 이력
- car_info: 차량 정보 (JSON)
- selected_insurance: 선택한 보험상품 ID
- satisfaction_score: 만족도 점수 (1-5)
- selection_date: 보험 선택일

ML_Recommendations 테이블 (추천 이력):
- recommendation_id (PK): 추천 고유 ID
- user_id (FK): 사용자 ID
- recommended_products: 추천 상품 리스트 (JSON)
- ml_scores: ML 추천 점수 (JSON)
- similar_users: 유사 사용자 리스트 (JSON)
- recommendation_date: 추천 생성일
- user_feedback: 사용자 피드백 (선택, 무시 등)

================================================================================
성과 지표 및 평가 기준
================================================================================

ML 추천 시스템 성과 지표:
- [ ] ML 추천 정확도: 유사 사용자 기반 추천의 정확성 (목표: 85% 이상)
- [ ] 사용자 만족도: 추천 보험상품에 대한 만족도 (목표: 4.2/5.0 이상)
- [ ] 추천 다양성: 추천 상품의 다양성 지수 측정
- [ ] 응답 속도: LLM+RAG+ML 통합 응답 시간 (목표: 5초 이내)
- [ ] Cold Start 해결률: 신규 사용자 대상 추천 성공률 (목표: 75% 이상)

시스템 성능 지표:
- [ ] 페이지 로딩 시간: 3초 이내
- [ ] 챗봇 응답 시간: 5초 이내
- [ ] 보험료 계산 시간: 2초 이내
- [ ] 모바일 반응성: 모든 디바이스에서 정상 작동

================================================================================
insurance_mock_server.py 파일 이동 계획
================================================================================

1. 파일 이동 필요성

현재 위치:
jin/insurance_mock_server.py

이동할 위치:
jin/backend/insurance_mock_server.py

2. 이동 이유

Django 프로젝트와 함께 관리:
- Django 앱들과 같은 위치에서 관리
- 버전 관리가 용이

Import 경로 단순화:
# 현재
from insurance_mock_server import InsuranceMockServer

# 이동 후
from insurance_mock_server import InsuranceMockServer

프로젝트 구조 일관성:
- 모든 소스 코드가 backend 폴더에 위치
- 관리가 편리

3. 이동 작업

1단계: 파일 이동
# jin 폴더에서 실행
mv insurance_mock_server.py backend/insurance_mock_server.py

2단계: Import 경로 수정
# jin/backend/insurance/services.py
from insurance_mock_server import InsuranceMockServer

3단계: Git 커밋
git add backend/insurance_mock_server.py
git rm insurance_mock_server.py
git commit -m "refactor: insurance_mock_server.py를 backend 폴더로 이동"
git push origin jin

4. 최종 파일 구조

jin/
├── backend/
│   ├── insurance_mock_server.py  # 이동된 파일
│   ├── insurance/
│   │   ├── services.py
│   │   ├── views.py
│   │   └── urls.py
│   ├── users/
│   └── insurance_project/
└── README.md

================================================================================
insurance_mock_server.py 통합 계획
================================================================================

1. Mock 서버 통합 위치

Django 서비스로 통합:
- jin/backend/insurance/services.py
- 기존 RAGService와 함께 InsuranceService 클래스로 통합

뷰에서 사용:
- jin/backend/insurance/views.py
- 챗봇 추천 기능에서 사용

API 엔드포인트 생성:
- jin/backend/insurance/urls.py
- 보험료 계산 API 엔드포인트 추가

2. 통합 계획

1단계: services.py에 통합
class InsuranceService:
    def __init__(self):
        self.mock_server = InsuranceMockServer()
        self.use_mock = getattr(settings, 'USE_MOCK_API', True)
    
    def calculate_insurance_premium(self, user_profile):
        # Mock 서버 사용
        return self.mock_server.calculate_premium(user_profile)

2단계: views.py에서 사용
def chat_api(request):
    # 챗봇에서 사용자 프로필 기반 보험 추천
    insurance_service = InsuranceService()
    result = insurance_service.calculate_insurance_premium(user_profile)
    return JsonResponse(result)

3단계: URL 패턴 추가
urlpatterns = [
    # 기존 URL들...
    path('api/calculate-premium/', views.calculate_premium_api, name='calculate_premium'),
    path('api/company/<str:company_name>/', views.company_detail_api, name='company_detail'),
]

3. 파일 구조

jin/backend/
├── insurance/
│   ├── services.py          # InsuranceService 클래스 통합
│   ├── views.py            # 챗봇 추천 뷰에서 사용
│   └── urls.py             # API 엔드포인트 추가
└── insurance_mock_server.py # 이동된 파일

4. 사용 시나리오

챗봇에서 사용:
1. 사용자가 로그인
2. 프로필 정보 확인
3. 누락 정보 수집 (버튼 옵션)
4. InsuranceService.calculate_insurance_premium() 호출
5. 12개 보험사별 견적 반환
6. 개인화된 추천 결과 제공

API 엔드포인트:
- POST /insurance/api/calculate-premium/ - 보험료 계산
- GET /insurance/api/company/<company_name>/ - 보험사 상세 정보

5. Mock 서버 기능 (12개 보험사)
- 삼성화재, 현대해상, KB손해보험, 메리츠화재, DB손해보험
- 롯데손해보험, 하나손해보험, 흥국화재, AXA손해보험, MG손해보험, 캐롯손해보험
- 한화손해보험 (추가됨)

6. 계산 요소
- 기본 요율: 보험사별 차등 (740,000원 ~ 850,000원)
- 나이 배수: 청년(1.2~1.35배), 중년(1.0배), 시니어(0.84~0.90배)
- 성별 배수: 남성(1.0배), 여성(0.89~0.94배)
- 지역 배수: 서울(1.05~1.14배), 부산(0.92~0.97배) 등
- 운전경험: 1년당 4.1~5.2% 할인
- 사고이력: 사고당 20~28% 할증
- 차량종류: 경차(0.76~0.82배) ~ 대형(1.27~1.36배)

7. 보장 수준별 가격
- 기본: 1.0배
- 표준: 1.2배
- 고급: 1.5배
- 프리미엄: 1.8배

================================================================================
한화손해보험 추가 및 PDF 처리 계획
================================================================================

1. 한화손해보험 추가

Mock 서버에 한화손해보험 추가:
- 한화손해보험 기본 정보 및 요율 설정
- 12개 보험사로 확장

한화손해보험 기본 정보:
- base_rate: 800000
- age_multiplier: {'young': 1.30, 'middle': 1.0, 'senior': 0.87}
- gender_multiplier: {'M': 1.0, 'F': 0.93}
- region_multiplier: {'서울': 1.10, '부산': 0.95, '대구': 0.90, '기타': 0.88}
- experience_bonus: 0.045
- accident_penalty: 0.24
- car_type_multiplier: {'경차': 0.80, '소형': 0.90, '준중형': 1.0, '중형': 1.14, '대형': 1.31, 'SUV': 1.20}
- special_discount: '한화카드 할인 15%'

2. PDF 파일 처리

한화손해보험 PDF 파일:
- 위치: jin/backend/policy_documents/pdf/한화손해보험/
- 파일명: (취합)한화손해보험_개인용(공동물건)자동차보험_약관.pdf
- 크기: 57MB

PDF 처리 작업:
- [ ] PDF → DOCX 변환
- [ ] policy_documents/docx/한화손해보험/ 폴더 생성
- [ ] 변환된 DOCX 파일 저장
- [ ] 텍스트 추출 및 청킹
- [ ] Upstage 임베딩 (4096 차원)
- [ ] Pinecone 인덱스 업로드

3. 폴더 구조 정리

policy_documents/
├── pdf/
│   ├── 한화손해보험/
│   │   └── (취합)한화손해보험_개인용(공동물건)자동차보험_약관.pdf
│   └── 기타보험사/
└── docx/
    ├── 한화손해보험/
    │   └── 한화손해보험_자동차보험_약관.docx (변환 후)
    └── 기타보험사/

================================================================================
SQLite3 삭제 계획
================================================================================

1. SQLite3 삭제 이유

MySQL 전환으로 인한 불필요:
- MySQL로 완전 전환 후 SQLite3 파일 불필요
- 프로젝트 구조 단순화
- 디스크 공간 절약

2. 삭제 대상 파일

- jin/backend/db.sqlite3
- jin/backend/db.sqlite3-journal (있다면)

3. 삭제 작업

1단계: MySQL 전환 완료 확인
- [ ] MySQL 데이터베이스 설정 완료
- [ ] 데이터 마이그레이션 완료
- [ ] 테스트 완료

2단계: SQLite3 파일 삭제
```bash
# jin/backend 폴더에서 실행
rm db.sqlite3
rm db.sqlite3-journal  # 있다면
```

3단계: Git 커밋
```bash
git add .
git commit -m "refactor: SQLite3 파일 삭제 (MySQL 전환 완료)"
git push origin jin
```

4. 삭제 후 확인사항

- [ ] MySQL 연결 정상 작동 확인
- [ ] 데이터 손실 없음 확인
- [ ] 애플리케이션 정상 작동 확인
- [ ] 백업 데이터 보관 확인

================================================================================
확인해야 할 추가 사항들
================================================================================

1. 보안 관련 확인사항
- [ ] CSRF 토큰 설정 확인
- [ ] XSS 방지 설정 확인
- [ ] SQL Injection 방지 확인
- [ ] 파일 업로드 보안 설정 확인

2. 성능 관련 확인사항
- [ ] 데이터베이스 쿼리 최적화 확인
- [ ] 캐싱 전략 확인
- [ ] 이미지/파일 압축 확인
- [ ] CDN 사용 여부 확인

3. 배포 관련 확인사항
- [ ] 환경변수 설정 확인
- [ ] 정적 파일 수집 확인
- [ ] 로그 설정 확인
- [ ] 백업 전략 확인

4. 테스트 관련 확인사항
- [ ] 단위 테스트 작성 확인
- [ ] 통합 테스트 작성 확인
- [ ] 사용자 테스트 계획 확인
- [ ] 성능 테스트 계획 확인

5. 문서화 관련 확인사항
- [ ] API 문서 작성 확인
- [ ] 사용자 매뉴얼 작성 확인
- [ ] 개발자 가이드 작성 확인
- [ ] 배포 가이드 작성 확인

6. 모니터링 관련 확인사항
- [ ] 에러 로깅 설정 확인
- [ ] 성능 모니터링 설정 확인
- [ ] 사용자 행동 분석 설정 확인
- [ ] 알림 시스템 설정 확인

7. 접근성 관련 확인사항
- [ ] WCAG 2.1 준수 확인
- [ ] 키보드 네비게이션 확인
- [ ] 스크린 리더 지원 확인
- [ ] 고대비 모드 지원 확인

8. 국제화 관련 확인사항
- [ ] 다국어 지원 계획 확인
- [ ] 시간대 설정 확인
- [ ] 통화 표시 형식 확인
- [ ] 날짜 형식 확인

9. 법적 요구사항 확인사항
- [ ] 개인정보보호법 준수 확인
- [ ] 이용약관 작성 확인
- [ ] 개인정보처리방침 작성 확인
- [ ] 쿠키 정책 확인

10. 비즈니스 로직 확인사항
- [ ] 보험료 계산 정확성 검증
- [ ] 사용자 프로필 검증 로직 확인
- [ ] 추천 알고리즘 정확성 확인
- [ ] 데이터 무결성 확인

================================================================================
챗봇 보험 추천 방식 상세
================================================================================

1. 기본 추천 로직
- 로그인한 사용자의 회원정보 확인
- 프로필 정보 누락 시 버튼 형식으로 옵션 제공
- 12개 보험사별 개인화된 보험료 계산 및 추천

2. 추천 과정
1단계: 사용자 프로필 확인
- 기본 정보: 나이, 성별, 지역, 운전경력, 사고이력 등

2단계: 누락 정보 확인 및 입력
- 프로필에 누락된 정보가 있으면 버튼 형식으로 옵션 제공
- 예시:
  - 차량 종류: 경차/소형/준중형/중형/대형/SUV
  - 보장 수준: 기본/표준/고급/프리미엄
  - 운전 목적: 개인용/업무용/가족용

3단계: 보험료 계산 및 추천
- insurance_mock_server.py의 InsuranceMockServer 클래스 사용
- 12개 보험사별 요율 계산
- 개인화된 추천 제공

3. Mock 서버 기능 (12개 보험사)
- 삼성화재, 현대해상, KB손해보험, 메리츠화재, DB손해보험
- 롯데손해보험, 하나손해보험, 흥국화재, AXA손해보험, MG손해보험, 캐롯손해보험
- 한화손해보험 (추가됨)

4. 계산 요소
- 기본 요율: 보험사별 차등
- 나이 배수: 청년(1.3배), 중년(1.0배), 시니어(0.85배)
- 성별 배수: 남성(1.0배), 여성(0.92배)
- 지역 배수: 서울(1.1배), 부산(0.95배) 등
- 운전경험: 1년당 5% 할인
- 사고이력: 사고당 25% 할증
- 차량종류: 경차(0.8배) ~ 대형(1.3배)

5. 챗봇 추천 흐름
1. 로그인 → 사용자 프로필 확인
2. 누락 정보 확인 → 버튼 옵션 제공
3. 정보 수집 완료 → 보험료 계산
4. 12개 보험사별 견적 비교
5. 개인화 추천 결과 제공
6. 상세 정보 및 가입 안내

6. 추천 결과 예시
{
    "best_value": "삼성화재",  # 최고 가성비
    "premium": 850000,        # 보험료
    "recommendations": [
        {"company": "삼성화재", "premium": 850000, "reason": "무사고 할인 최대 30%"},
        {"company": "현대해상", "premium": 820000, "reason": "하이카 앱 할인 15%"},
        # ... 12개 보험사
    ],
    "coverage_details": {...},
    "risk_level": "낮음",
    "special_offers": [...]
}

7. 챗봇 UI 특징
- 카카오톡 스타일 (색상만 변경)
- 버튼 기반 옵션 선택
- 음성 입력 지원
- 시니어 친화적 디자인

================================================================================
핵심 요구사항 (work_progress.txt 1-13번)
================================================================================

1. 회원가입/로그인 시스템
- [x] users 앱 생성 및 기본 구조
- [ ] login.jinja.html 템플릿 생성
- [ ] profile.jinja.html 템플릿 생성
- [ ] profile_completion.jinja.html 템플릿 생성

2. AI 챗봇 중심 시스템
- [ ] 메인페이지를 챗봇 중심으로 단순화
- [ ] 로그인 사용자 기반 개인화 추천
- [ ] 프로필 정보 누락 시 버튼 기반 옵션 입력
- [ ] 카카오톡 스타일 채팅 UI

3. 관리자 기능
- [ ] 관리자 메뉴 버튼 조건부 표시 (user.is_staff)
- [ ] PDF 업로드 기능
- [ ] PDF → DOCX 변환
- [ ] Pinecone 인덱스 업데이트

4. RAG 시스템 (PDF 처리)
- [ ] policy_documents/pdf → policy_documents/docx 변환
- [ ] Upstage 임베딩 사용 (4096 차원)
- [ ] Pinecone 인덱스 업로드
- [ ] 기존 데이터 처리 로직

5. 음성 지원
- [ ] Web Speech API 음성 입력
- [ ] 숫자 선택 음성 인식 ("1번", "2번")
- [ ] 키워드 기반 음성 명령

6. UI/UX 개선
- [ ] 시니어 친화적 디자인
- [ ] 신뢰성 색상 테마
- [ ] 모바일 반응형 디자인
- [ ] 카카오톡 스타일 (색상만 변경)

================================================================================
단계별 작업 계획
================================================================================

1단계: 메인페이지 정리 및 챗봇 중심화
목표: 4개 메뉴 → 챗봇 1개 메뉴로 단순화

작업 내용:
- [ ] main_page.jinja.html 수정 (메뉴 제거)
- [ ] views.py의 main_page 함수 수정
- [ ] 불필요한 URL 패턴 제거
- [ ] 챗봇 중심 UI로 변경

삭제할 메뉴:
- ML 추천
- RAG 시스템  
- 보험 비교

유지할 기능:
- AI 챗봇 (자동차보험 추천)

2단계: 사용자 인증 시스템 완성
목표: 로그인/회원가입/프로필 관리 완성

작업 내용:
- [ ] login.jinja.html 생성
- [ ] profile.jinja.html 생성  
- [ ] profile_completion.jinja.html 생성
- [ ] base.jinja.html URL 참조 수정
- [ ] 데이터베이스 마이그레이션

3단계: 데이터베이스 MySQL 전환
목표: SQLite3 → MySQL 전환

작업 내용:
- [ ] settings.py DATABASES 설정 수정
- [ ] MySQL 연결 설정
- [ ] 데이터 마이그레이션
- [ ] 테스트
- [ ] SQLite3 파일 삭제

4단계: RAG 시스템 구현 (PDF 처리)
목표: PDF → DOCX → Pinecone 업로드

작업 내용:
- [ ] PDF to DOCX 변환 기능 구현
- [ ] policy_documents/docx 폴더 생성
- [ ] Upstage 임베딩 사용 (4096 차원)
- [ ] Pinecone 인덱스 업로드 기능
- [ ] 관리자 업로드 인터페이스
- [ ] 한화손해보험 PDF 처리

5단계: AI 챗봇 개인화 추천
목표: 사용자 프로필 기반 보험 추천

작업 내용:
- [ ] 사용자 프로필 기반 추천 로직
- [ ] 프로필 정보 누락 시 버튼 옵션
- [ ] 카카오톡 스타일 채팅 UI
- [ ] 음성 입력 기능
- [ ] 한화손해보험 Mock 서버 추가

6단계: 관리자 기능 구현
목표: 관리자 전용 기능

작업 내용:
- [ ] 관리자 메뉴 조건부 표시
- [ ] PDF 업로드 관리
- [ ] 보험사 선택 기능
- [ ] Pinecone 데이터 관리

7단계: UI/UX 최적화
목표: 시니어 친화적 디자인

작업 내용:
- [ ] 신뢰성 색상 테마 적용
- [ ] 큰 글씨, 명확한 버튼
- [ ] 모바일 반응형 최적화
- [ ] 음성 지원 완성

================================================================================
정리 대상 파일/코드
================================================================================

1. 설정 파일 정리
- [ ] .env: EMBEDDING_DIMENSION=1536 삭제
- [ ] settings.py: EMBEDDING_DIMENSION 관련 코드 제거

2. 서비스 코드 정리  
- [ ] services.py: OpenAI 임베딩 관련 코드 제거
- [ ] Upstage 임베딩만 사용하도록 수정

3. 뷰/URL 정리
- [ ] views.py: 불필요한 뷰 함수 제거
- [ ] urls.py: 사용하지 않는 URL 패턴 제거

4. 템플릿 정리
- [ ] 불필요한 템플릿 파일 삭제
- [ ] 메인페이지 메뉴 정리

5. 데이터베이스 파일 정리
- [ ] db.sqlite3 삭제 (MySQL 전환 후)
- [ ] db.sqlite3-journal 삭제 (있다면)

================================================================================
파일 구조 정리
================================================================================

현재 구조:
jin/backend/
├── insurance/
│   ├── templates/insurance/
│   │   ├── main_page.jinja.html (4개 메뉴)
│   │   ├── langchain_dashboard.jinja.html
│   │   ├── ml_dashboard.jinja.html
│   │   └── compare.jinja.html
│   ├── views.py (불필요한 뷰들)
│   └── services.py (OpenAI 임베딩 코드)
├── users/
│   └── templates/users/
│       ├── register.jinja.html ✅
│       ├── login.jinja.html ⏳
│       ├── profile.jinja.html ⏳
│       └── profile_completion.jinja.html ⏳
├── policy_documents/
│   └── pdf/
│       └── 한화손해보험/
│           └── (취합)한화손해보험_개인용(공동물건)자동차보험_약관.pdf
└── insurance_project/
    └── settings.py (EMBEDDING_DIMENSION 설정)

목표 구조:
jin/backend/
├── insurance_mock_server.py  # 이동된 파일
├── insurance/
│   ├── templates/insurance/
│   │   ├── main_page.jinja.html (챗봇 1개 메뉴)
│   │   └── chat.jinja.html (챗봇 인터페이스)
│   ├── views.py (정리된 뷰들)
│   └── services.py (Upstage 임베딩만)
├── users/
│   └── templates/users/
│       ├── register.jinja.html ✅
│       ├── login.jinja.html ✅
│       ├── profile.jinja.html ✅
│       └── profile_completion.jinja.html ✅
└── policy_documents/
    ├── pdf/
    │   └── 한화손해보험/
    │       └── (취합)한화손해보험_개인용(공동물건)자동차보험_약관.pdf
    └── docx/
        └── 한화손해보험/
            └── 한화손해보험_자동차보험_약관.docx (변환 후)

================================================================================
기술 스택 정리
================================================================================

사용할 기술:
- 임베딩: Upstage (4096 차원)
- 벡터 DB: Pinecone
- LLM: OpenAI GPT-4
- 데이터베이스: MySQL
- UI: Bootstrap 5 + 카카오톡 스타일
- 음성: Web Speech API

제거할 기술:
- 임베딩: OpenAI (1536 차원)
- 메뉴: ML 추천, RAG 시스템, 보험 비교
- 데이터베이스: SQLite3 (삭제 예정)

================================================================================
다음 작업 우선순위
================================================================================

즉시 작업 (1-2일):
1. insurance_mock_server.py 파일 이동 (jin → jin/backend)
2. 메인페이지 메뉴 정리 (4개 → 1개)
3. 사용자 인증 템플릿 완성 (login, profile)
4. 불필요한 코드 정리 (OpenAI 임베딩, EMBEDDING_DIMENSION)

단기 작업 (3-5일):
5. MySQL 데이터베이스 전환
6. SQLite3 파일 삭제 (MySQL 전환 완료 후)
7. RAG 시스템 구현 (PDF → DOCX → Pinecone)
8. 한화손해보험 Mock 서버 추가
9. AI 챗봇 개인화 추천

중기 작업 (1-2주):
10. 관리자 기능 구현
11. 음성 지원 완성
12. UI/UX 최적화

================================================================================
성공 기준
================================================================================

기능적 요구사항:
- [ ] 챗봇만 있는 단순한 메인페이지
- [ ] 로그인 사용자 기반 개인화 추천
- [ ] PDF 업로드 → Pinecone 업로드 완료
- [ ] 음성 입력 지원
- [ ] 시니어 친화적 UI
- [ ] 12개 보험사 지원 (한화손해보험 포함)

기술적 요구사항:
- [ ] MySQL 데이터베이스 사용
- [ ] Upstage 임베딩 (4096 차원) 사용
- [ ] 불필요한 코드 완전 제거
- [ ] 모바일 반응형 디자인
- [ ] SQLite3 파일 삭제 완료

================================================================================
향후 발전 방향
================================================================================

서비스 확장:
- [ ] 모바일 앱 개발: 네이티브 모바일 애플리케이션
- [ ] 다른 보험 상품: 생명보험, 건강보험 등으로 확장
- [ ] 개인화 고도화: 머신러닝을 통한 추천 알고리즘 개선

보안 강화:
- [ ] 개인정보 보호: 고객 데이터 암호화 및 보안 강화
- [ ] 인증 시스템: OAuth, JWT 등을 활용한 사용자 인증

기술 발전:
- [ ] 실시간 학습: 새로운 사용자 선택 데이터로 모델 지속 업데이트
- [ ] Cold Start 해결: 신규 사용자 대상 콘텐츠 기반 필터링 병행

================================================================================
참고사항
================================================================================

Pinecone 인덱스 정보:
- 인덱스 이름: insurance-documents-main
- 차원: 4096 (Upstage)
- 메트릭: cosine

환경변수 정리:
- 제거: EMBEDDING_DIMENSION=1536
- 사용: UPSTAGE_EMBEDDING_DIMENSION=4096

파일 업로드 경로:
- PDF: policy_documents/pdf/
- DOCX: policy_documents/docx/

한화손해보험 정보:
- PDF 파일: (취합)한화손해보험_개인용(공동물건)자동차보험_약관.pdf
- 파일 크기: 57MB
- 위치: jin/backend/policy_documents/pdf/한화손해보험/

================================================================================
작업 계획서 요약
================================================================================

작업 계획서를 jin/backend/project_work_plan.txt 파일로 저장했습니다.

주요 내용:
1. 현재 상황 분석: 4개 메뉴 → 챗봇 1개로 단순화 필요
2. 팀 구성 및 역할 분담: 5명 팀원의 역할 명확화
3. 개발 환경 및 배포 계획: PythonAnywhere 클라우드 호스팅
4. 데이터베이스 스키마 상세: Users, UserProfiles, ML_Recommendations 테이블
5. 성과 지표 및 평가 기준: ML 추천 정확도, 사용자 만족도 등
6. 핵심 요구사항: work_progress.txt의 1-13번 내용 정리
7. 단계별 작업 계획: 7단계로 나누어 체계적 진행
8. 정리 대상: 불필요한 코드/파일 정리 목록
9. 기술 스택: Upstage 임베딩 사용, MySQL 전환
10. 한화손해보험 추가: 12개 보험사로 확장
11. SQLite3 삭제: MySQL 전환 완료 후 삭제
12. 향후 발전 방향: 서비스 확장, 보안 강화, 기술 발전

다음 우선 작업:
1. insurance_mock_server.py 파일 이동 (jin → jin/backend)
2. 메인페이지 메뉴 정리 (4개 → 1개)
3. 사용자 인증 템플릿 완성 (login, profile)
4. 불필요한 코드 정리 (OpenAI 임베딩, EMBEDDING_DIMENSION)
5. 한화손해보험 Mock 서버 추가

이제 이 계획서를 바탕으로 단계별로 작업을 진행하시면 됩니다. 
각 단계 완료 후 git 커밋/푸시도 잊지 마세요!

================================================================================
보험사별 문서 관리 시스템 상세 계획
================================================================================

1. 폴더 구조 정리

현재 PDF 폴더 구조 (12개 보험사):
policy_documents/pdf/
├── 삼성화재/
├── 현대해상/
├── KB손해보험/
├── 메리츠화재/
├── DB손해보험/
├── 롯데손해보험/
├── 하나손해보험/
├── 흥국화재/
├── AXA손해보험/
├── MG손해보험/
├── 캐롯손해보험/
└── 한화손해보험/

목표 DOCX 폴더 구조 (동일한 보험사별 구조):
policy_documents/docx/
├── 삼성화재/
├── 현대해상/
├── KB손해보험/
├── 메리츠화재/
├── DB손해보험/
├── 롯데손해보험/
├── 하나손해보험/
├── 흥국화재/
├── AXA손해보험/
├── MG손해보험/
├── 캐롯손해보험/
└── 한화손해보험/

2. Pinecone 보험사별 데이터 관리

벡터 메타데이터 구조:
{
    "source": "파일명.pdf",
    "company": "보험사명",
    "document_type": "약관/안내서/특별약관",
    "upload_date": "2024-01-01",
    "chunk": 0,
    "file_path": "policy_documents/docx/보험사명/파일명.docx"
}

검색 시 보험사별 필터링:
- 전체 검색: 모든 보험사 문서
- 보험사별 검색: 특정 보험사 문서만
- 문서 타입별 검색: 약관, 안내서, 특별약관 등

3. 관리자 업로드 시스템

3-1. 관리자 업로드 페이지 기능:
- [ ] 보험사 선택 드롭다운 (12개 보험사)
- [ ] 파일 업로드 (PDF/DOCX)
- [ ] 문서 타입 선택 (약관/안내서/특별약관)
- [ ] 문서 제목/설명 입력
- [ ] 태그/키워드 입력
- [ ] 업로드 버튼

3-2. 업로드 처리 과정:
1단계: 파일 업로드
- 선택된 보험사 폴더에 PDF 저장
- 파일명 정리 (중복 방지)

2단계: PDF → DOCX 변환:
```python
def convert_pdf_to_docx(pdf_path, company):
    """PDF를 DOCX로 변환"""
    docx_path = pdf_path.replace('/pdf/', '/docx/').replace('.pdf', '.docx')
    os.makedirs(os.path.dirname(docx_path), exist_ok=True)
    
    # PDF → DOCX 변환 로직
    # python-docx 또는 다른 라이브러리 사용
    
    return docx_path
```

3단계: 텍스트 추출 및 청킹
- DOCX에서 텍스트 추출
- RecursiveCharacterTextSplitter로 청킹
- 청크별 메타데이터 생성

4단계: Pinecone 업로드:
```python
def upload_to_pinecone(docx_path, company, metadata):
    """DOCX를 Pinecone에 업로드"""
    rag_service = RAGService()
    
    # 텍스트 추출
    text = extract_text_from_docx(docx_path)
    
    # 청킹
    chunks = rag_service._split_text(text)
    
    # 메타데이터 생성
    metadatas = []
    for i, chunk in enumerate(chunks):
        chunk_metadata = metadata.copy()
        chunk_metadata.update({
            "chunk": i,
            "company": company,
            "file_path": docx_path
        })
        metadatas.append(chunk_metadata)
    
    # Pinecone 업로드
    rag_service.vectorstore.add_texts(texts=chunks, metadatas=metadatas)
```

4. 관리자 기능 구현

4-1. 관리자 대시보드 메뉴:
- [ ] 문서 관리
  - 문서 업로드
  - 문서 목록/검색
  - 문서 수정/삭제
- [ ] 보험사 관리
  - 보험사별 문서 통계
  - 보험사별 Pinecone 데이터 관리
- [ ] Pinecone 관리
  - 인덱스 통계 확인
  - 보험사별 데이터 확인
  - 전체 인덱스 업데이트

4-2. 문서 업로드 페이지:
```html
<!-- 관리자 문서 업로드 페이지 -->
<div class="upload-section">
    <h3>문서 업로드</h3>
    
    <!-- 보험사 선택 -->
    <div class="form-group">
        <label>보험사 선택:</label>
        <select name="company" required>
            <option value="">보험사를 선택하세요</option>
            <option value="삼성화재">삼성화재</option>
            <option value="현대해상">현대해상</option>
            <option value="KB손해보험">KB손해보험</option>
            <option value="메리츠화재">메리츠화재</option>
            <option value="DB손해보험">DB손해보험</option>
            <option value="롯데손해보험">롯데손해보험</option>
            <option value="하나손해보험">하나손해보험</option>
            <option value="흥국화재">흥국화재</option>
            <option value="AXA손해보험">AXA손해보험</option>
            <option value="MG손해보험">MG손해보험</option>
            <option value="캐롯손해보험">캐롯손해보험</option>
            <option value="한화손해보험">한화손해보험</option>
        </select>
    </div>
    
    <!-- 파일 업로드 -->
    <div class="form-group">
        <label>파일 선택:</label>
        <input type="file" name="document" accept=".pdf,.docx" required>
    </div>
    
    <!-- 문서 정보 -->
    <div class="form-group">
        <label>문서 제목:</label>
        <input type="text" name="title" required>
    </div>
    
    <div class="form-group">
        <label>문서 타입:</label>
        <select name="document_type" required>
            <option value="약관">약관</option>
            <option value="안내서">안내서</option>
            <option value="특별약관">특별약관</option>
        </select>
    </div>
    
    <div class="form-group">
        <label>설명:</label>
        <textarea name="description"></textarea>
    </div>
    
    <div class="form-group">
        <label>태그 (쉼표로 구분):</label>
        <input type="text" name="tags" placeholder="자동차보험,개인용,공동물건">
    </div>
    
    <button type="submit" class="btn btn-primary">업로드 및 변환</button>
</div>
```

5. 구현 단계

5-1. 폴더 구조 생성:
```bash
# jin/backend 폴더에서 실행
mkdir -p policy_documents/docx/삼성화재
mkdir -p policy_documents/docx/현대해상
mkdir -p policy_documents/docx/KB손해보험
mkdir -p policy_documents/docx/메리츠화재
mkdir -p policy_documents/docx/DB손해보험
mkdir -p policy_documents/docx/롯데손해보험
mkdir -p policy_documents/docx/하나손해보험
mkdir -p policy_documents/docx/흥국화재
mkdir -p policy_documents/docx/AXA손해보험
mkdir -p policy_documents/docx/MG손해보험
mkdir -p policy_documents/docx/캐롯손해보험
mkdir -p policy_documents/docx/한화손해보험
```

5-2. 관리자 뷰 구현:
- [ ] admin_upload_document 뷰 생성
- [ ] admin_document_list 뷰 생성
- [ ] admin_pinecone_management 뷰 생성

5-3. 서비스 함수 구현:
- [ ] upload_document_with_company 함수
- [ ] convert_pdf_to_docx 함수
- [ ] update_pinecone_by_company 함수

5-4. 템플릿 생성:
- [ ] admin_upload.jinja.html
- [ ] admin_documents.jinja.html
- [ ] admin_pinecone.jinja.html

6. 보험사별 데이터 관리

6-1. Pinecone 메타데이터 구조:
```python
metadata = {
    "source": f"{company}_{filename}",
    "company": company,
    "document_type": document_type,
    "upload_date": upload_date,
    "chunk": chunk_index,
    "file_path": f"policy_documents/docx/{company}/{filename}.docx",
    "tags": tags,
    "description": description
}
```

6-2. 보험사별 검색 기능:
```python
def search_documents_by_company(self, query: str, company: str, top_k: int = 5):
    """보험사별 문서 검색"""
    try:
        results = self.vectorstore.similarity_search(
            query,
            k=top_k,
            filter={"company": company}
        )
        return results
    except Exception as e:
        logger.error(f"보험사별 검색 실패: {e}")
        return []
```

7. 에러 처리 및 로깅

7-1. 업로드 과정 로깅:
- 파일 업로드 성공/실패
- PDF → DOCX 변환 성공/실패
- Pinecone 업로드 성공/실패
- 보험사별 통계 기록

7-2. 에러 처리:
- 파일 형식 검증
- 파일 크기 제한
- 중복 파일 처리
- 변환 실패 시 롤백

8. 성능 최적화

8-1. 배치 처리:
- 여러 파일 동시 업로드
- 백그라운드 작업 큐
- 진행률 표시

8-2. 캐싱:
- 보험사별 문서 목록 캐싱
- 검색 결과 캐싱
- 임베딩 결과 캐싱

================================================================================
관리자 업로드 시스템 구현 계획
================================================================================

1. 관리자 전용 페이지 구조

URL 패턴:
- /admin/upload/ - 문서 업로드 페이지
- /admin/documents/ - 문서 관리 페이지
- /admin/pinecone/ - Pinecone 관리 페이지

2. 보험사 정보 관리

보험사 목록 (12개):
```python
INSURANCE_COMPANIES = [
    "삼성화재",
    "현대해상", 
    "KB손해보험",
    "메리츠화재",
    "DB손해보험",
    "롯데손해보험",
    "하나손해보험",
    "흥국화재",
    "AXA손해보험",
    "MG손해보험",
    "캐롯손해보험",
    "한화손해보험"
]
```

3. 업로드 처리 로직

3-1. 파일 저장:
```python
def save_uploaded_file(file, company):
    """업로드된 파일을 보험사 폴더에 저장"""
    filename = secure_filename(file.name)
    pdf_path = f"policy_documents/pdf/{company}/{filename}"
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    
    with open(pdf_path, 'wb') as f:
        for chunk in file.chunks():
            f.write(chunk)
    
    return pdf_path
```

3-2. PDF → DOCX 변환:
```python
def convert_pdf_to_docx(pdf_path, company):
    """PDF를 DOCX로 변환"""
    docx_path = pdf_path.replace('/pdf/', '/docx/').replace('.pdf', '.docx')
    os.makedirs(os.path.dirname(docx_path), exist_ok=True)
    
    # PDF → DOCX 변환 로직
    # python-docx 또는 다른 라이브러리 사용
    
    return docx_path
```

3-3. Pinecone 업로드:
```python
def upload_to_pinecone(docx_path, company, metadata):
    """DOCX를 Pinecone에 업로드"""
    rag_service = RAGService()
    
    # 텍스트 추출
    text = extract_text_from_docx(docx_path)
    
    # 청킹
    chunks = rag_service._split_text(text)
    
    # 메타데이터 생성
    metadatas = []
    for i, chunk in enumerate(chunks):
        chunk_metadata = metadata.copy()
        chunk_metadata.update({
            "chunk": i,
            "company": company,
            "file_path": docx_path
        })
        metadatas.append(chunk_metadata)
    
    # Pinecone 업로드
    rag_service.vectorstore.add_texts(texts=chunks, metadatas=metadatas)
```

4. 관리자 권한 확인

4-1. 관리자 전용 뷰 데코레이터:
```python
from django.contrib.auth.decorators import user_passes_test

def admin_required(view_func):
    """관리자 권한 확인 데코레이터"""
    return user_passes_test(lambda u: u.is_staff)(view_func)

@admin_required
def admin_upload_document(request):
    """관리자 문서 업로드 페이지"""
    # 관리자 전용 로직
```

5. 진행률 표시

5-1. 업로드 진행률:
- 파일 업로드: 20%
- PDF → DOCX 변환: 40%
- 텍스트 추출: 60%
- Pinecone 업로드: 80%
- 완료: 100%

5-2. 실시간 상태 업데이트:
- AJAX를 통한 진행률 업데이트
- WebSocket을 통한 실시간 알림

================================================================================
*이 문서는 작업 진행 상황에 따라 지속적으로 업데이트됩니다.*
================================================================================ 



================================================================================ 
2025년 08월 06일 작업 일지
================================================================================ 
요구사항 정리
1. 현재 문제점들
현대해상 변환 성공으로 나왔는데 DOCX 폴더에 파일이 없는 문제
이용약관에 표 처리 문제
현재 업로드 페이지가 너무 복잡함 (보험사 선택과 파일 선택만 있으면 됨)
2. 개선 요구사항
멀티 파일 업로드: 여러 PDF 파일을 하나의 DOCX로 통합
자동 필드 생성: 제목, 설명, 태그 등을 자동으로 생성
기존 약관 처리: 이전 보험사 약관을 어떻게 처리할지 방법 제시
처리 시간 최적화: 업로드 및 변환 시간이 오래 걸릴 것에 대한 처리 방안
3. 핵심 요구사항
단순화된 업로드 페이지: 보험사 선택 + 파일 선택만
여러 PDF 파일들을 하나의 DOCX로 통합: 여러 개의 이용약관 PDF를 하나의 통합된 DOCX 파일로 변환
Pinecone 업데이트: 해당 보험사의 통합된 이용약관 내용으로 업데이트
성능 최적화: 시간이 오래 걸리는 작업에 대한 처리

✅ 완료된 작업들:
✅ PDF → DOCX 변환 오류 해결 (NULL bytes, control characters 처리)
✅ 멀티 파일 업로드 기능 구현
✅ 단순화된 업로드 페이지 구현 (보험사 선택 + 파일 선택만)
✅ 기존 DOCX 파일 삭제 후 재생성 기능
✅ Pinecone 데이터 업데이트 기능
✅ 문서 관리 페이지 구현
✅ 파일 생명주기 관리 시스템 설계

🔄 현재 진행 중인 작업:
1. 강제 PDF → DOCX 변환 및 Pinecone 업데이트
2. 기존 DOCX 파일 삭제 후 재생성
3. 웹페이지 프로세스 수정 (PDF 업로드 → DOCX 변환 → Pinecone 업데이트)
4. 문서 관리 페이지 수정
5. Pinecone 관리 페이지 수정

📋 다음 단계 작업 계획:
1. 파일 생명주기 관리 시스템 구현 (3일 후 자동 삭제)
2. 문서 관리 페이지 완성 (파일 다운로드, 상태 확인)
3. Pinecone 관리 페이지 완성 (인덱스 통계, 보험사별 데이터 관리)
4. 전체 시스템 테스트 및 최적화

현재 상태:
✅ 웹 서버: 정상 실행 중 (http://localhost:8000/)
✅ 데이터베이스: MySQL 연결 완료
✅ 관리자 계정: 생성됨 (admin)
✅ 기본 기능: 로그인, 회원가입, 메인 페이지
✅ PDF 변환: 개선된 변환 로직 구현 완료
✅ 멀티 업로드: 여러 PDF → 단일 DOCX 통합 기능 구현
✅ Pinecone 연동: 기본 구조 구현 완료

다음 우선순위:
1. 강제 변환 및 Pinecone 업데이트 실행
2. 기존 DOCX 파일 정리
3. 웹페이지 프로세스 최적화
4. 관리 페이지 완성